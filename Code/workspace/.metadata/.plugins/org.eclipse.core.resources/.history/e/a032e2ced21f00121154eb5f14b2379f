/*
 * generated by Xtext
 */
package mddProject.concreteSyntax.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import jdsl.ContentModel
import jdsl.CMSEnum
import jdsl.NamedElement
import jdsl.CMS
import jdsl.ContentType
import java.util.ArrayList
class JDSLGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val model = resource.contents.head as ContentModel
		var ArrayList<CMS> cmsList = new ArrayList<CMS>
		var ArrayList<ContentType> contentList = new ArrayList<ContentType>
		
		if(!model.hasElements.empty)
		{
			for (NamedElement c : model.hasElements)
			{
			
				try
				{
					switch c
					{
						CMS : cmsList.add(c as CMS)
						ContentType : contentList.add(c as ContentType)	
					}	
				}
				catch(Exception e)	
				{}	 	
			}
			
			for(CMS cms : cmsList)
			{
					fsa.generateFile("cmsOutput.txt", cms.type.toString)
			}
		}
		
	
		
		 
	}
	
		def className(Resource res) {
		var name = res.URI.lastSegment
		return name.substring(0, name.indexOf('.'))
	}
	
	def toJeaseDomainClass()
	{
		
	}
	
	def toJeaseEditorClass()
	{
		
	}
	
	def toJeaseHTML()
	{
		
	}
	
	def toJeaseXML()
	{
		
	}
	
	def toN2Class()
	{
		//Note that N2 combines domain class and editor into one class file thanks to C# attributes. 
	}
	
	def toConcrete5()
	{
		//Call to Create Controller.php
		//Call to Create Edit.php
		//Call to Create add.php
		//Call to whatever we are missing.
	}
}
