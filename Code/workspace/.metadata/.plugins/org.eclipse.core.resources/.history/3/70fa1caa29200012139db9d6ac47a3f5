/*
 * generated by Xtext
 */
package mddProject.concreteSyntax.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import jdsl.ContentModel
import jdsl.CMSEnum
import jdsl.NamedElement
import jdsl.CMS
import jdsl.ContentType
import java.util.ArrayList
class JDSLGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val model = resource.contents.head as ContentModel
		var ArrayList<CMS> cmsList = new ArrayList<CMS>
		var ArrayList<ContentType> contentList = new ArrayList<ContentType>
		
		if(!model.hasElements.empty)
		{
			for (NamedElement c : model.hasElements)
			{
			
				try
				{
					switch c
					{
						CMS : cmsList.add(c as CMS)
						ContentType : contentList.add(c as ContentType)	
					}	
				}
				catch(Exception e)	
				{}	 	
			}
			
			for(CMS cms : cmsList)
			{
				
					for(ContentType ct : contentList)
					{
						switch cms.type
						{
							case cms.type.toString.equals("Jease") : toJease(ct, fsa)
							case cms.type.toString.equals("N2") : toN2Class(ct,fsa )
							case cms.type.toString.equals("Concrete5") : toConcrete5(ct,fsa)
							case cms.type.toString.equals("Plone") : toPlone(ct,fsa)
						}
					}
			}
		}
	 
	}
	
		def className(Resource res) {
		var name = res.URI.lastSegment
		return name.substring(0, name.indexOf('.'))
	}
	
	
	def toJease(ContentType ct,IFileSystemAccess fsa)
	{
		fsa.generateFile(ct.name + ".java", toJeaseDomainClass(ct))
	    fsa.generateFile(ct.name +"Editor"+".java", toJeaseEditorClass(ct))
		fsa.generateFile(ct.name +".jsp", toJeaseJSP(ct))
	    fsa.generateFile(ct.name +".xml", toJeaseXML(ct))
	
	}
	def toJeaseDomainClass(ContentType ct)
	'''
	« »
	'''
	def toJeaseEditorClass(ContentType ct)
    '''
	
	'''
	
	def toJeaseJSP(ContentType ct)
    '''
	
	'''
	
	def toJeaseXML(ContentType ct)
    '''
    <jease>
    <component>
    		<domain>«ct.name»</domain>
    		<editor>«ct.name»Editor</editor>
    		<icon></icon>
    		<view>/custom/«ct.name».jsp</view>
    </component>
    </jease>
	'''
	
	def toN2Class(ContentType ctm,IFileSystemAccess fsa)
	{
		//Note that N2 combines domain class and editor into one class file thanks to C# attributes. 
	}
	
	def toConcrete5(ContentType ct,IFileSystemAccess fsa)
	{
		//Call to Create Controller.php
		//Call to Create Edit.php
		//Call to Create add.php
		//Call to whatever we are missing.
	}
	
	def toPlone(ContentType ct,IFileSystemAccess fsa)
	{
		
	}
}
